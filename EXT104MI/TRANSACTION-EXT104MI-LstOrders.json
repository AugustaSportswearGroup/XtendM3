{"programModules":{"EXT104MI":{"program":"EXT104MI","triggers":{},"transactions":{"LstOrders":{"sourceUuid":"4f4a3498-617f-47a3-b346-b03974983e83","name":"LstOrders","program":"EXT104MI","description":"List Customer Orders","active":true,"multi":true,"modified":1698242594158,"modifiedBy":"SADANGJ","outputFields":[{"name":"DIVI","description":"Division","length":3,"mandatory":false,"type":"A"},{"name":"ORNO","description":"Order number","length":10,"mandatory":false,"type":"A"},{"name":"OREF","description":"Ecommerce order number","length":30,"mandatory":false,"type":"A"},{"name":"ORDT","description":"Order date","length":8,"mandatory":false,"type":"A"},{"name":"ORST","description":"Status","length":30,"mandatory":false,"type":"A"},{"name":"CUOR","description":"PO number","length":20,"mandatory":false,"type":"A"},{"name":"DSDT","description":"Ship date","length":8,"mandatory":false,"type":"A"},{"name":"ETRN","description":"Tracking number","length":200,"mandatory":false,"type":"A"},{"name":"CARR","description":"Carrier","length":15,"mandatory":false,"type":"A"},{"name":"NTLA","description":"Total order value net","length":16,"mandatory":false,"type":"A"},{"name":"MODL","description":"Delivery method","length":3,"mandatory":false,"type":"A"},{"name":"SUBL","description":"Sublimation","length":1,"mandatory":false,"type":"A"},{"name":"ORTP","description":"Order type","length":30,"mandatory":false,"type":"A"},{"name":"OBLC","description":"Order stop","length":3,"mandatory":false,"type":"A"},{"name":"CUCD","description":"Currency","length":3,"mandatory":false,"type":"A"},{"name":"STOT","description":"Shipping Total","length":16,"mandatory":false,"type":"A"},{"name":"DTOT","description":"Discount Total","length":16,"mandatory":false,"type":"A"},{"name":"ORSL","description":"Lowest status","length":2,"mandatory":false,"type":"A"},{"name":"ORSH","description":"Highest status","length":2,"mandatory":false,"type":"A"},{"name":"OTIP","description":"Tip number","length":10,"mandatory":false,"type":"A"}],"inputFields":[{"name":"DIVI","description":"Division","length":3,"mandatory":false,"type":"A"},{"name":"CUNO","description":"Customer number","length":10,"mandatory":true,"type":"A"},{"name":"ORNO","description":"Order number","length":10,"mandatory":false,"type":"A"},{"name":"PONO","description":"PO number","length":30,"mandatory":false,"type":"A"},{"name":"ITNO","description":"Item number","length":15,"mandatory":false,"type":"A"},{"name":"FRDT","description":"From Date","length":8,"mandatory":false,"type":"A"},{"name":"TODT","description":"To Date","length":8,"mandatory":false,"type":"A"},{"name":"PNUM","description":"Page number","length":3,"mandatory":false,"type":"A"},{"name":"PSZE","description":"Page size","length":3,"mandatory":false,"type":"A"},{"name":"LORN","description":"Last order number","length":10,"mandatory":false,"type":"A"},{"name":"DRTN","description":"Duration","length":4,"mandatory":false,"type":"A"},{"name":"LODT","description":"Last Order Date","length":8,"mandatory":false,"type":"A"},{"name":"OREF","description":"Order Reference number","length":30,"mandatory":false,"type":"A"},{"name":"ORTP","description":"Order type","length":30,"mandatory":false,"type":"A"},{"name":"IVNO","description":"Invoice number","length":14,"mandatory":false,"type":"A"},{"name":"STAT","description":"Status","length":30,"mandatory":false,"type":"A"}],"utilities":[]}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"4f4a3498-617f-47a3-b346-b03974983e83":{"uuid":"4f4a3498-617f-47a3-b346-b03974983e83","updated":1711993426224,"updatedBy":"ABHISHEK","created":1698087907674,"createdBy":"SADANGJ","apiVersion":"0.21","beVersion":"16.0.0.20240116163623.6","language":"GROOVY","codeHash":"FE11F3DECB3B3971839BA2A14642FE5E31BECF6266422A8573B1C19EE87DCC48","code":""}}}