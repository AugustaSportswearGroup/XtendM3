{"programModules":{"EXT104MI":{"program":"EXT104MI","triggers":{},"transactions":{"LstOrderLines":{"sourceUuid":"b1c6df80-15d0-4861-9dd5-7c59c89026c5","name":"LstOrderLines","program":"EXT104MI","description":"List Ecommerce Order Lines","active":true,"multi":true,"modified":1699389857595,"modifiedBy":"SADANGJ","outputFields":[{"name":"ITNO","description":"Item","length":60,"mandatory":false,"type":"A"},{"name":"ORQT","description":"Ordered quantity","length":16,"mandatory":false,"type":"A"},{"name":"COLR","description":"Color","length":30,"mandatory":false,"type":"A"},{"name":"SIZE","description":"Size","length":15,"mandatory":false,"type":"A"},{"name":"SAPR","description":"Sales price","length":16,"mandatory":false,"type":"A"},{"name":"LNAM","description":"Line Amount","length":16,"mandatory":false,"type":"A"},{"name":"ORST","description":"Status","length":30,"mandatory":false,"type":"A"},{"name":"ISKU","description":"Item number","length":15,"mandatory":false,"type":"A"},{"name":"SHDT","description":"Shipment date","length":8,"mandatory":false,"type":"A"},{"name":"SNUM","description":"Snumber","length":8,"mandatory":false,"type":"A"},{"name":"WNUM","description":"Work order number","length":15,"mandatory":false,"type":"A"},{"name":"CUSX","description":"Design group","length":3,"mandatory":false,"type":"A"},{"name":"ETRN","description":"Tracking number","length":30,"mandatory":false,"type":"A"},{"name":"CUOR","description":"PO number","length":20,"mandatory":false,"type":"A"},{"name":"CARR","description":"Carrier","length":15,"mandatory":false,"type":"A"},{"name":"MODL","description":"Delivery method","length":3,"mandatory":false,"type":"A"},{"name":"CUCD","description":"Currency","length":3,"mandatory":false,"type":"A"},{"name":"SAD1","description":"Ship to Address1","length":36,"mandatory":false,"type":"A"},{"name":"SAD2","description":"Ship to Address2","length":36,"mandatory":false,"type":"A"},{"name":"STOW","description":"Ship to City","length":20,"mandatory":false,"type":"A"},{"name":"SECA","description":"Ship to State","length":2,"mandatory":false,"type":"A"},{"name":"SPON","description":"Ship to Postal Code","length":10,"mandatory":false,"type":"A"},{"name":"SCSC","description":"Ship to Country","length":3,"mandatory":false,"type":"A"},{"name":"RNUM","description":"Rnumber","length":36,"mandatory":false,"type":"A"},{"name":"IVNO","description":"Invoice number","length":14,"mandatory":false,"type":"A"},{"name":"STAT","description":"M3 status","length":2,"mandatory":false,"type":"A"},{"name":"DLIX","description":"Delivery Number","length":11,"mandatory":false,"type":"A"},{"name":"PONR","description":"Line number","length":5,"mandatory":false,"type":"A"},{"name":"PRWD","description":"Price without discount","length":16,"mandatory":false,"type":"A"}],"inputFields":[{"name":"ORNO","description":"Order number","length":30,"mandatory":true,"type":"A"}],"utilities":[]}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"b1c6df80-15d0-4861-9dd5-7c59c89026c5":{"uuid":"b1c6df80-15d0-4861-9dd5-7c59c89026c5","updated":1711990715264,"updatedBy":"ABHISHEK","created":1698086576038,"createdBy":"SADANGJ","apiVersion":"0.21","beVersion":"16.0.0.20240116163623.6","language":"GROOVY","codeHash":"63820760D547ACD55ACA58B6BA8D7A6E08ADD52F7BB929537C1EBEC434E45DFE","code":""}}}