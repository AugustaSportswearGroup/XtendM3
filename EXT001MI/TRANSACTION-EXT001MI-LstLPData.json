{"programModules":{"EXT001MI":{"program":"EXT001MI","triggers":{},"transactions":{"LstLPData":{"sourceUuid":"ea2d58cd-6a90-41fe-a04b-c84cbe0083d4","name":"LstLPData","program":"EXT001MI","description":"LstLPData","active":true,"multi":true,"modified":1683626866325,"modifiedBy":"M3CONSADMX","outputFields":[{"name":"ORNO","description":"Order Number","length":10,"mandatory":false,"type":"A"},{"name":"DLIX","description":"Delivery Number","length":11,"mandatory":false,"type":"N"},{"name":"PLID","description":"Player ID","length":15,"mandatory":false,"type":"A"},{"name":"PLNM","description":"Player Name","length":60,"mandatory":false,"type":"A"},{"name":"PLNU","description":"Player Number","length":10,"mandatory":false,"type":"A"},{"name":"TEAM","description":"Team Name","length":40,"mandatory":false,"type":"A"},{"name":"LEAG","description":"League Name","length":40,"mandatory":false,"type":"A"},{"name":"WHLO","description":"Warehouse","length":3,"mandatory":false,"type":"A"},{"name":"WHSL","description":"Location","length":10,"mandatory":false,"type":"A"},{"name":"ITNO","description":"Item Number","length":15,"mandatory":false,"type":"A"},{"name":"ORQT","description":"Ordered Quantity","length":15,"mandatory":false,"type":"A"},{"name":"RIDL","description":"Order Line","length":5,"mandatory":false,"type":"N"}],"inputFields":[{"name":"CONO","description":"Company Number","length":3,"mandatory":false,"type":"N"},{"name":"DIVI","description":"Division","length":3,"mandatory":false,"type":"A"},{"name":"DLIX","description":"Delivery Number","length":11,"mandatory":true,"type":"N"}],"utilities":[]}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"ea2d58cd-6a90-41fe-a04b-c84cbe0083d4":{"uuid":"ea2d58cd-6a90-41fe-a04b-c84cbe0083d4","updated":1683627290520,"updatedBy":"M3CONSADMX","created":1674638484665,"createdBy":"M3CONSADMX","apiVersion":"0.21","beVersion":"16.0.0.20230216180900.6","language":"GROOVY","codeHash":"62AB6C1640896CC43BDCC102B6827ACB5ABAFF8982F4B81140C0FE2D185115C5","code":""}}}