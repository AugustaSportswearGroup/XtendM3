{"programModules":{"EXT011MI":{"program":"EXT011MI","triggers":{},"transactions":{"LstShipment":{"sourceUuid":"202c6506-3e46-4050-9cda-327cd61c134b","name":"LstShipment","program":"EXT011MI","description":"List Shipment Lines","active":true,"multi":true,"modified":1705927067675,"modifiedBy":"ABHISHEK","outputFields":[{"name":"PRID","description":"Product ID","length":15,"mandatory":false,"type":"A"},{"name":"UST1","description":"User string 1","length":20,"mandatory":false,"type":"A"},{"name":"QTY1","description":"Quantity 1","length":15,"mandatory":false,"type":"N"},{"name":"UST2","description":"User string 2","length":20,"mandatory":false,"type":"A"},{"name":"RFTX","description":"Reference text","length":40,"mandatory":false,"type":"A"},{"name":"CITC","description":"Commodity Item Code","length":15,"mandatory":false,"type":"A"},{"name":"TX60","description":"Description","length":60,"mandatory":false,"type":"A"},{"name":"CUVA","description":"Customs Value","length":18,"mandatory":false,"type":"A"},{"name":"QTY2","description":"Quantity 2","length":15,"mandatory":false,"type":"N"},{"name":"UNMS","description":"Unit of measure","length":3,"mandatory":false,"type":"A"},{"name":"PRCY","description":"Producer country","length":3,"mandatory":false,"type":"A"},{"name":"ECCN","description":"ECCN number","length":10,"mandatory":false,"type":"A"},{"name":"OCRT","description":"Origin criterion","length":15,"mandatory":false,"type":"A"},{"name":"STGE","description":"Stage","length":10,"mandatory":false,"type":"A"},{"name":"GRIN","description":"Group index","length":10,"mandatory":false,"type":"A"},{"name":"PON2","description":"PO number","length":10,"mandatory":false,"type":"A"},{"name":"IDNS","description":"Do not ship","length":1,"mandatory":false,"type":"A"}],"inputFields":[{"name":"DLIX","description":"Delivery number","length":11,"mandatory":true,"type":"N"},{"name":"BCNT","description":"Build contents flag","length":1,"mandatory":false,"type":"A"}],"utilities":[]}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"202c6506-3e46-4050-9cda-327cd61c134b":{"uuid":"202c6506-3e46-4050-9cda-327cd61c134b","updated":1702539765869,"updatedBy":"ABHISHEK","created":1683571484174,"createdBy":"SADANGJ","apiVersion":"0.21","beVersion":"16.0.0.20230918173517.9","language":"GROOVY","codeHash":"8819D63A432437FB37BA34E6DC8AABBF030EE09DA6E672EB838739A6608E627B","code":""}}}